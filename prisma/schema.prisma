// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  savedColleges SavedCollege[]
  notes         CollegeNote[]
  applications  CollegeApplication[]
  preferences   UserPreferences?
  resume        Resume?
}

enum UserRole {
  USER
  ADMIN
}

// User Preferences model for storing onboarding data
model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  data      String   // JSON string of preferences
  resumeUrl String?  // URL to the uploaded resume
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Resume data models
model Resume {
  id               String            @id @default(cuid())
  userId           String            @unique
  fullName         String?
  email            String?
  phone            String?
  resumeUrl        String?
  strengths        String?           @db.Text
  improvementAreas String?           @db.Text
  summary          String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  education        Education[]
  experience       WorkExperience[]
  skills           Skill[]
  certifications   Certification[]
  projects         Project[]
  
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id            String   @id @default(cuid())
  resumeId      String
  institution   String
  degree        String?
  fieldOfStudy  String?
  startDate     DateTime?
  endDate       DateTime?
  gpa           String?
  achievements  String?   @db.Text
  
  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String    @id @default(cuid())
  resumeId    String
  company     String
  position    String
  startDate   DateTime?
  endDate     DateTime?
  location    String?
  description String?    @db.Text
  
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  resumeId  String
  name      String
  level     String?
  
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Certification {
  id            String    @id @default(cuid())
  resumeId      String
  name          String
  issuer        String?
  issueDate     DateTime?
  expirationDate DateTime?
  
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  resumeId    String
  name        String
  description String?   @db.Text
  startDate   DateTime?
  endDate     DateTime?
  url         String?
  
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

// NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// College-related models
model College {
  id              String   @id @default(cuid())
  name            String
  state           String?
  city            String?
  type            String?
  tuition         Int?
  satVerbalAvg    Int?
  satMathAvg      Int?
  acceptanceRate  Float?
  enrollmentSize  Int?
  website         String?
  description     String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  savedBy         SavedCollege[]
  notes           CollegeNote[]
  applications    CollegeApplication[]
  majors          CollegeMajor[]
}

model SavedCollege {
  id        String   @id @default(cuid())
  userId    String
  collegeId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, collegeId])
}

model CollegeNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  collegeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model CollegeApplication {
  id            String           @id @default(cuid())
  userId        String
  collegeId     String
  status        ApplicationStatus @default(PLANNING)
  deadlineDate  DateTime?
  submittedDate DateTime?
  notes         String?          @db.Text
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  college       College          @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  PLANNING
  IN_PROGRESS
  SUBMITTED
  ACCEPTED
  REJECTED
  WAITLISTED
  DEFERRED
}

model Major {
  id          String        @id @default(cuid())
  name        String        @unique
  category    String?
  colleges    CollegeMajor[]
}

model CollegeMajor {
  id        String   @id @default(cuid())
  collegeId String
  majorId   String
  
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  major     Major    @relation(fields: [majorId], references: [id], onDelete: Cascade)
  
  @@unique([collegeId, majorId])
}
